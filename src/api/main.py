"""FastAPI application for Teams Transcription Bot."""

import logging
import time
from contextlib import asynccontextmanager
from datetime import datetime

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from .routers import transcripts, meetings, health
from .dependencies import cleanup_services
from .models.responses import ErrorResponse, ErrorDetail, ErrorCode

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global startup time for health checks
startup_time = time.time()


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan manager."""
    # Startup
    logger.info("Starting Teams Transcription API")
    yield
    # Shutdown
    logger.info("Shutting down Teams Transcription API")
    await cleanup_services()


# Create FastAPI application
app = FastAPI(
    title="Teams Transcription API",
    description="""
    **Multilingual meeting transcription with speaker diarization**

    This API provides endpoints for managing meeting transcripts generated by the Teams Transcription Bot.
    Features include:

    - **Transcript Management**: Create, read, update, and delete transcripts
    - **Multiple Formats**: Support for JSON, Markdown, and plain text formats
    - **Speaker Diarization**: Track multiple speakers with confidence scores
    - **Azure Integration**: Secure storage in Azure Blob Storage
    - **Meeting Management**: Associate transcripts with meeting metadata
    - **Multilingual Support**: Process transcripts in multiple languages

    ## Authentication

    This API uses Azure Active Directory authentication with managed identities.

    ## Rate Limiting

    API requests are rate-limited to ensure fair usage and system stability.
    """,
    version="1.0.0",
    contact={
        "name": "Teams Transcription Bot",
        "url": "https://github.com/yourusername/teams-transcription-bot",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Add request logging middleware
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """Log all incoming requests."""
    start_time = time.time()

    # Generate request ID for correlation
    request_id = f"req_{int(start_time * 1000)}"

    logger.info(f"[{request_id}] {request.method} {request.url.path}")

    response = await call_next(request)

    process_time = time.time() - start_time
    logger.info(
        f"[{request_id}] Completed in {process_time:.3f}s "
        f"with status {response.status_code}"
    )

    # Add request ID to response headers
    response.headers["X-Request-ID"] = request_id

    return response


# Global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """Handle unexpected exceptions."""
    logger.error(f"Unhandled exception: {exc}", exc_info=True)

    error_response = ErrorResponse(
        errors=[
            ErrorDetail(
                code=ErrorCode.INTERNAL_ERROR,
                message="An unexpected error occurred"
            )
        ],
        message="Internal server error",
        request_id=request.headers.get("X-Request-ID")
    )

    return JSONResponse(
        status_code=500,
        content=error_response.model_dump()
    )


# Include routers
app.include_router(
    transcripts.router,
    prefix="/api/v1/transcripts",
    tags=["Transcripts"]
)

app.include_router(
    meetings.router,
    prefix="/api/v1/meetings",
    tags=["Meetings"]
)

app.include_router(
    health.router,
    prefix="/api/v1/health",
    tags=["Health"]
)


# Root endpoint
@app.get("/", include_in_schema=False)
async def root():
    """Root endpoint redirect to documentation."""
    return {
        "message": "Teams Transcription API",
        "version": "1.0.0",
        "docs_url": "/docs",
        "health_url": "/api/v1/health",
        "timestamp": datetime.utcnow().isoformat()
    }


# Get application uptime for health checks
def get_uptime_seconds() -> float:
    """Get application uptime in seconds."""
    return time.time() - startup_time